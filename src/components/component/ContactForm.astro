---
import { validateName, validateEmail, validateMessage, validateFormFields } from '@/utils/validateForm.js';
import { getLangFromUrl, useTranslations } from '@/i18n/utils';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
---

<form id="contactForm" class="contact-form" action="https://formspree.io/f/xkgwrdpk" method="POST">
  <div class="form-group">
    <label for="name" data-i18n="contactForm.name">{t('contactForm.name')}</label>
    <input type="text" id="name" name="name" data-i18n="contactForm.namePlaceholder" placeholder={t('contactForm.namePlaceholder')} required />
    <span class="error" id="nameError"></span>
  </div>
  <div class="form-group">
    <label for="email" data-i18n="contactForm.mail">{t('contactForm.mail')}</label>
    <input type="email" id="email" name="email" placeholder="example@example.com" required />
    <span class="error" id="emailError"></span>
  </div>
  <div class="form-group">
    <label for="message" data-i18n="contactForm.message">{t('contactForm.message')}</label>
    <textarea id="message" name="message" placeholder={t('contactForm.messagePlaceholder')} required></textarea>
    <span class="error" id="messageError"></span>
  </div>
  <button type="submit" data-i18n="contactForm.btn_submit">{t('contactForm.btn_submit')}</button>
</form>

<!-- Modal -->
<div id="modal" class="modal">
  <div class="modal-content">
    <span id="closeModal" class="close">&times;</span>
    <img src="/img/mail.svg" data-i18n="contactForm.alt_img" alt={t('contactForm.message')} class="modal-image" />
    <p data-i18n="contactForm.message_submit">{t('contactForm.message_submit')}</p>
  </div>
</div>

<script>
  import { validateName, validateEmail, validateMessage, validateFormFields } from '@/utils/validateForm.js';
  import { updateLanguage, getCurrentLang } from '@/i18n/utils';

  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('contactForm') as HTMLFormElement;
    const name = document.getElementById('name') as HTMLInputElement;
    const email = document.getElementById('email') as HTMLInputElement;
    const message = document.getElementById('message') as HTMLTextAreaElement;
    
    const nameError = document.getElementById('nameError') as HTMLSpanElement;
    const emailError = document.getElementById('emailError') as HTMLSpanElement;
    const messageError = document.getElementById('messageError') as HTMLSpanElement;
    const modal = document.getElementById('modal') as HTMLDivElement;
    const closeModal = document.getElementById('closeModal') as HTMLSpanElement;
  

    if (form && name && email && message && nameError && emailError && messageError && modal && closeModal) {
    form.addEventListener('submit', function (event) {
      event.preventDefault(); // Prevent default form submission

      const { nameErrorMessage, emailErrorMessage, messageErrorMessage } = validateFormFields(name.value, email.value, message.value);

      // Reset previous error messages
      nameError.innerText = nameErrorMessage;
      emailError.innerText = emailErrorMessage;
      messageError.innerText = messageErrorMessage;

      if (nameErrorMessage || emailErrorMessage || messageErrorMessage) {
        // Mostrar errores
        name.style.borderColor = nameErrorMessage ? 'red' : 'green';
        email.style.borderColor = emailErrorMessage ? 'red' : 'green';
        message.style.borderColor = messageErrorMessage ? 'red' : 'green';
      } else {
        // Form is valid, you can submit the form
        const formData = new FormData(form);
        fetch(form.action, {
          method: 'POST',
          body: formData,
          headers: {
            'Accept': 'application/json'
          }
        })
        .then(response => response.json())
        .then(data => {
          if (data.ok) {
            modal.style.display = 'block'; // Show modal
            form.reset(); // Reset the form fields
          } else {
            alert('Ha ocurrido un error al enviar el mensaje');
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('Ha ocurrido un error al enviar el mensaje');
        });
      }
    });

    // Validación en tiempo real para el campo de nombre
    name.addEventListener('input', () => {
      const errorMessage = validateName(name.value);
      nameError.innerText = errorMessage;
      if (errorMessage) {
        name.style.borderColor = 'red';
      } else {
        name.style.borderColor = 'green';
      }
    });

    name.addEventListener('input', () => {
        const errorMessage = validateName(name.value);
        nameError.innerText = errorMessage;
        name.style.borderColor = errorMessage ? 'red' : 'green';
      });

      email.addEventListener('input', () => {
        const errorMessage = validateEmail(email.value);
        emailError.innerText = errorMessage;
        email.style.borderColor = errorMessage ? 'red' : 'green';
      });

      message.addEventListener('input', () => {
        const errorMessage = validateMessage(message.value);
        messageError.innerText = errorMessage;
        message.style.borderColor = errorMessage ? 'red' : 'green';
      });

    // Cerrar el modal
    closeModal.addEventListener('click', () => {
      modal.style.display = 'none';
    });

    // Cerrar el modal al hacer clic fuera de él
    window.addEventListener('click', (event) => {
      if (event.target === modal) {
        modal.style.display = 'none';
      }
    });

     // Actualizar las traducciones cuando cambie el idioma
     document.addEventListener('languageChanged', () => {
        updateLanguage(getCurrentLang());
      });
    
  }});

</script>

<style>
  .contact-form {
    display: flex;
    flex-direction: column;
    gap: 15px;
  }

  .form-group {
    display: flex;
    flex-direction: column;
    padding: 20px 10px;
  }

  label {
    padding-bottom: 5px;
    color: #ffffff;
  }

  input, textarea {
    padding: 10px;
    border: 1px solid #414141;
    border-radius: 4px;
    background-color: transparent;
    color: #ffffff;
  }

  input:focus {
    outline: none;
    border-color: #FF3CAC;
    border-top: transparent;
  }

  textarea:focus {
    outline: none;
    border-color: #FF3CAC;
    border-top: transparent;
  }

  textarea{
      height: 150px;
      resize: none;
  }

  .error {
    color: rgb(238, 5, 5);
    font-size: 0.85rem;
    padding-top: 5px;
  }

  button {
    padding: 10px;
    background-color: #784BA0;
    color: #ffffff;
    border: none;
    font-size: 1.1rem;
    font-weight: 600;
    border-radius: 4px;
    box-shadow: rgba(0, 0, 0, 0.1) 0px 10px 50px;
    cursor: pointer;
    transition: background-color 0.3s ease, transform 0.3s ease, background-image 0.3s ease;
  }

  button:hover {
      background-image: linear-gradient(225deg, #FF3CAC 0%, #784BA0 50%, #2B86C5 100%);
      transform: scale(1.1);
  }

  /* Styles for the modal */
  .modal {
    display: none; 
    position: fixed; 
    z-index: 1; 
    left: 0;
    top: 0;
    width: 100%; 
    height: 100%; 
    overflow: auto; 
  }

  .modal-content {
    background-color: #fefefe;
    margin: 15% auto;
    padding: 20px;
    width: 80%; 
    max-width: 300px;
    text-align: center;
    border-radius: 10px;      
    box-shadow: rgba(50, 50, 93, 0.25) 0px 6px 12px -2px, rgba(0, 0, 0, 0.3) 0px 3px 7px -3px;
  }

  .close {
    color: #2e2d2d;
    float: right;
    font-size: 28px;
    font-weight: bold;
  }

  .close:hover,
  .close:focus {
    color: black;
    text-decoration: none;
    cursor: pointer;
  }

  .modal-image {
    width: 140px; 
    height: auto;
    display: block;
    margin: 0 auto 10px;
  }

  body.open form  {
    display: none;
  }


  @media(min-width:768px){
      .contact-form{
          width: 70%;          
      }

      label{
          font-size: 1.1rem;
      }
  }

  @media(min-width:1024px){
      .contact-form{
          width: 50%;          
      }
  }
</style> 